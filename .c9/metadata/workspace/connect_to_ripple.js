{"filter":false,"title":"connect_to_ripple.js","tooltip":"/connect_to_ripple.js","undoManager":{"mark":14,"position":14,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":144,"column":1},"action":"insert","lines":["exports.connect = function(db){","","","// ----- STANDARDIZED SCRIPT -----","// add your financial platform here, here's code for Ripple","","","    /* Loading ripple-lib with Node.js */","var ripple = require('ripple-lib')","var Remote = ripple.Remote;","","","var remote = new Remote({","  // see the API Reference for available options","  servers: [ 'wss://s1.ripple.com:443' ]","});","","remote.connect(function() {","    console.log(\"connected to Ripple\")","  /* remote connected */","","});//end remote connect","","","","","// load all connected users from that financial platform","function get_all_collections(){","    ","var get_all_collections =require('../get_all_collections.js')","get_all_collections.get_all_collections(function(accounts){","                request_subscribe(accounts)","","})","}","get_all_collections()","","","","","","function request_subscribe(accounts){","    ","// connect to ripple-lib ","","","var req = remote.request_subscribe();","req.message.accounts = accounts","console.log(req.message.accounts)","req.request();","remote.on('transaction', function(data){"," ","","// filter out payement transactions","","","if(data.transaction.TransactionType === 'Payment'){","","// filter out transactions from accounts within the network    ","if(accounts.indexOf(data.transaction.Account)!== -1){","console.log(data.transaction.TransactionType + \"scanned\")","","// filter by currencies that are in use by the account that recieved the payment","","  db.collection(data.transaction.Destination).find({type: \"contract\"}, function(err,doc){","            console.log(\"hi\")","            for(var i=0;i<doc.length;i++){","                ","                if(data.transaction.Amount.currency === doc[i].currency){","                    ","                console.log(data.transaction)","                console.log(data.engine_result_message)","                    ","                    transaction()","                break","                ","                }","                else consumption_outside_network()","            }","            ","            ","            ","            ","    }) ","    ","    ","}","else{","    console.log(data.transaction.Account)","    console.log(accounts.indexOf(data.transaction.Account))","    console.log(\"transaction from an account outside the network\")    ","}","}","","// update consumption outside network penalty","","function consumption_outside_network(){","    ","    // upsert extra-network consumption","    db.collection(data.transaction.Account).findAndModify({","        query: {type: \"consumption_outside_network\", currency: data.transaction.Amount.currency}, ","        update:{$inc:{total_amount:Number(data.transaction.Amount.value)}}, ","        upsert: true,","        new: true","        ","    }, ","        function(err,doc){","            console.log(doc)","        })    ","    ","}","","","","// connect the transaction by creating a dividend pathway","","","function transaction(){","        ","    //get taxRate","     db.collection(data.transaction.Destination).findOne({type: \"contract\", currency: data.transaction.Amount.currency}, function(err,doc){","            var taxRate;","","","            taxRate = doc.taxRate","            console.log(taxRate)","            console.log(\"taxRate\" + taxRate)","            ","            var connect_transaction = require('../connect_transaction.js')","","","            connect_transaction.connect_transaction(data.transaction.Account, data.transaction.Destination, data.transaction.Amount.currency, data.transaction.Amount.value, taxRate)","            ","            ","","    }) ","   ","} ","         ","})","    ","}","","","}"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":180},"end":{"row":131,"column":181},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":181},"end":{"row":131,"column":182},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":182},"end":{"row":131,"column":183},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":183},"end":{"row":131,"column":184},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":29,"column":35},"end":{"row":29,"column":36},"action":"remove","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":128,"column":48},"end":{"row":128,"column":49},"action":"remove","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":183},"end":{"row":131,"column":184},"action":"remove","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":182},"end":{"row":131,"column":183},"action":"remove","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":181},"end":{"row":131,"column":182},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":180},"end":{"row":131,"column":181},"action":"remove","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":30,"column":40},"end":{"row":30,"column":41},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":30,"column":41},"end":{"row":30,"column":42},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":30,"column":42},"end":{"row":30,"column":43},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":30,"column":43},"end":{"row":30,"column":44},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":52,"column":0},"end":{"row":137,"column":2},"action":"remove","lines":["","// filter out payement transactions","","","if(data.transaction.TransactionType === 'Payment'){","","// filter out transactions from accounts within the network    ","if(accounts.indexOf(data.transaction.Account)!== -1){","console.log(data.transaction.TransactionType + \"scanned\")","","// filter by currencies that are in use by the account that recieved the payment","","  db.collection(data.transaction.Destination).find({type: \"contract\"}, function(err,doc){","            console.log(\"hi\")","            for(var i=0;i<doc.length;i++){","                ","                if(data.transaction.Amount.currency === doc[i].currency){","                    ","                console.log(data.transaction)","                console.log(data.engine_result_message)","                    ","                    transaction()","                break","                ","                }","                else consumption_outside_network()","            }","            ","            ","            ","            ","    }) ","    ","    ","}","else{","    console.log(data.transaction.Account)","    console.log(accounts.indexOf(data.transaction.Account))","    console.log(\"transaction from an account outside the network\")    ","}","}","","// update consumption outside network penalty","","function consumption_outside_network(){","    ","    // upsert extra-network consumption","    db.collection(data.transaction.Account).findAndModify({","        query: {type: \"consumption_outside_network\", currency: data.transaction.Amount.currency}, ","        update:{$inc:{total_amount:Number(data.transaction.Amount.value)}}, ","        upsert: true,","        new: true","        ","    }, ","        function(err,doc){","            console.log(doc)","        })    ","    ","}","","","","// connect the transaction by creating a dividend pathway","","","function transaction(){","        ","    //get taxRate","     db.collection(data.transaction.Destination).findOne({type: \"contract\", currency: data.transaction.Amount.currency}, function(err,doc){","            var taxRate;","","","            taxRate = doc.taxRate","            console.log(taxRate)","            console.log(\"taxRate\" + taxRate)","            ","            var connect_transaction = require('./connect_transaction.js')","","","            connect_transaction.connect_transaction(data.transaction.Account, data.transaction.Destination, data.transaction.Amount.currency, data.transaction.Amount.value, taxRate)","            ","            ","","    }) ","   ","} "]}]}]]},"ace":{"folds":[{"start":{"row":12,"column":25},"end":{"row":15,"column":0},"placeholder":"..."},{"start":{"row":17,"column":27},"end":{"row":21,"column":0},"placeholder":"..."},{"start":{"row":27,"column":31},"end":{"row":34,"column":0},"placeholder":"..."},{"start":{"row":56,"column":51},"end":{"row":92,"column":0},"placeholder":"..."},{"start":{"row":96,"column":39},"end":{"row":110,"column":0},"placeholder":"..."},{"start":{"row":117,"column":23},"end":{"row":137,"column":0},"placeholder":"..."}],"scrolltop":301,"scrollleft":0,"selection":{"start":{"row":52,"column":0},"end":{"row":137,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1428613641000,"hash":"967ec80cd2f49d4428554210ab9837aa188b9c99"}