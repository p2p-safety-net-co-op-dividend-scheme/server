{"filter":false,"title":"swarm.js","tooltip":"/test_ideas/swarm.js","undoManager":{"mark":41,"position":41,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":194,"column":0},"action":"remove","lines":["var Fraction = require('fractional').Fraction // javascript library to handle fractions","","/*loading mongodb*/    ","var mongojs = require(\"mongojs\")","var db = mongojs(\"mongodb://guest:guest@ds035448.mongolab.com:35448/bootable_version\");   ","","var account = \"r46XJq7UJmoPno2cURDRs8bB9crRLJgpcY\"","var currency = \"RES\"","var dividendRate = \"0.06\"","var dividendRate_quota_X = 1","","compute_swarm(account, currency, dividendRate, function(LINES, dividendRate_quota_sum){","    console.log(LINES); console.log(dividendRate_quota_sum)","    var amount = 4","var f = new Fraction(dividendRate_quota_sum).numerator","","console.log(f)","})","","function compute_swarm(account_id, currency, dividendRate, callback){","","","var LINES = []","var dividendRate_quota_sum = 0","    var penalty = Boolean","","var line = 0 // LINES[i].line // todo: improve this","","","lines_for_X(account_id, currency, dividendRate, dividendRate_quota_X)","","","function lines_for_X(account, currency, dividendRate_X, dividendRate_quota_X){","","var line_X = line // todo: improve this.","line ++","","","","","   //filter out if an account has multiple dividendRates, sort by the rate closest to dividendRate_X","  filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, line_X_dividend_pathways)  ","  function filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, callback){","       db.collection(account).find({ type:\"dividend_pathway\", currency: currency, dividendRate: { $lte: dividendRate_X} },function (err, doc){","           var temp = []","           for(var i=0;i<doc.length;i++){","               if(JSON.stringify(temp).indexOf(doc[i].account) === -1){","               temp.push(doc[i])","               }","               else{","","               // the account already has a doc, check if dividendRate is lower than the previous, filter out the highest one","               ","               ","               Array.prototype.filterObjects = function(key, value) {","                   return this.filter(function(x) { return x[key] === value; })","               }","               ","               var a = temp.filterObjects(\"account\", doc[i].account);","                ","               if(a[0].dividendRate > doc[i].dividendRate){  ","               temp = temp.filter(function (el) {","                        return el.account !== doc[i].account;","                       });","            ","               temp.push(doc[i])                   ","               }","                   ","               }","              ","           }","           ","           ","           ","           ","setTimeout(function(){ // todo: use async.waterfall instead of setTimeout","var doc_filtered = temp","","    callback(doc_filtered)","    ","}, 1000)","    ","           ","        })","        ","        ","        ","  }","","","   function line_X_dividend_pathways(doc){","","        for(var i=0;i<doc.length;i++){","            // filter out the root account","                  if(doc.account !== account_id){","                      ","                     // filter out accounts that have been passed to avoid loops          ","                     if(JSON.stringify(LINES).indexOf(doc[i].account) ===-1){","                         ","                         add_inventive_layer_penalties(doc[i])","                     } ","                  } ","                  else console.log(\"CIRCULAR\")","        }","   }","","","","    function add_inventive_layer_penalties(doc_X){","        ","            var penalty_dividendRate","    db.collection(doc_X.account).find({ type:\"incentive_layer_penalty\", currency: currency },function (err, doc){","        if(doc.length!==0){","            ","            // get the lowest dividend rate that user has a penalty at","       penalty_dividendRate = doc[0].dividendRate","       for(var j=0;j<doc.length;j++){","            if(penalty_dividendRate<doc[j].dividendRate<penalty_dividendRate){","            penalty_dividendRate = doc[j].dividendRate","            }","        }","        if(penalty_dividendRate<dividendRate_X){","            penalty=true","            ","        add_dividendRate_quotas(doc_X, dividendRate_quota_X, penalty_dividendRate)","","        }","        else add_dividendRate_quotas(doc_X, dividendRate_quota_X)","        }","        else add_dividendRate_quotas(doc_X, dividendRate_quota_X)","","    ","})","","}","","","","    function add_dividendRate_quotas(doc,dividendRate_quota_X, penalty_dividendRate){ // todo: fix this","    //     ","    if(doc.dividendRate <= dividendRate_X){","        ","        var dividendRate_quota_X = new Fraction((doc.dividendRate *100),(dividendRate_X*100)).multiply(new Fraction(dividendRate_quota_X)).toString()","","","            console.log((doc.dividendRate *100)+\"/\"+(dividendRate_X*100) + \"*\"+dividendRate_quota_X)","","    }","    else dividendRate_quota_X = dividendRate_quota_X","    ","    // More penalty code:","    if(penalty_dividendRate !== undefined){","","        var dividendRate_quota_without_penalty = dividendRate_quota_X","        var dividendRate_quota_X = new Fraction((penalty_dividendRate *100),(dividendRate_X*100)).multiply(new Fraction(dividendRate_quota_X)).toString()","","        ","        ","                console.log(penalty_dividendRate)","                console.log(dividendRate_quota_X)","","        }","","dividendRate_quota_sum = new Fraction(dividendRate_quota_sum).add(new Fraction(dividendRate_quota_X)).toString()","","console.log(dividendRate_quota_sum)","push_to_LINES(doc, dividendRate_quota_X, dividendRate_quota_without_penalty)","    }","    ","    ","    function push_to_LINES(doc, dividendRate_quota_X, dividendRate_quota_without_penalty){","","","        console.log(dividendRate_quota_X)","","","        if(penalty == true)LINES.push({account: doc.account, pathway: doc.total_pathway, dividendRate_quota: dividendRate_quota_X, line: Number(line_X), dividendRate_quota_without_penalty: dividendRate_quota_without_penalty}) ","        else LINES.push({account: doc.account, pathway: doc.total_pathway, dividendRate_quota: dividendRate_quota_X, line: Number(line_X)}) //add total pathway here","    console.log(\"next\")","       lines_for_X(doc.account, currency, doc.dividendRate, dividendRate_quota_X)","","    }","","        ","    }","","setTimeout(function(){","","","    callback(LINES, dividendRate_quota_sum, currency, account_id)","    ","}, 10000)","    ","}",""]},{"start":{"row":0,"column":0},"end":{"row":193,"column":0},"action":"insert","lines":["var Fraction = require('fractional').Fraction // javascript library to handle fractions","","/*loading mongodb*/    ","var mongojs = require(\"mongojs\")","var db = mongojs(\"mongodb://guest:guest@ds035448.mongolab.com:35448/bootable_version\");   ","","/*","var account = \"r46XJq7UJmoPno2cURDRs8bB9crRLJgpcY\"","var currency = \"RES\"","var dividendRate = \"0.06\"","var dividendRate_quota_X = 1","","compute_swarm(account, currency, dividendRate, function(LINES, dividendRate_quota_sum){","    console.log(LINES); console.log(dividendRate_quota_sum)","    var amount = 4","var f = new Fraction(dividendRate_quota_sum).numerator","","console.log(f)","})","*/","","","exports.compute_swarm = function (account_id, currency, dividendRate, dividend_amount, callback){","","","var LINES = []","var dividendRate_quota_sum = 0","    var penalty = Boolean","","var line = 0 // LINES[i].line // todo: improve this","","","lines_for_X(account_id, currency, dividendRate, 1)","","","function lines_for_X(account, currency, dividendRate_X, dividendRate_quota_X){","","var line_X = line // todo: improve this.","line ++","","","","","   //filter out if an account has multiple dividendRates, sort by the rate closest to dividendRate_X","  filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, line_X_dividend_pathways)  ","  function filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, callback){","       db.collection(account).find({ type:\"dividend_pathway\", currency: currency, dividendRate: { $lte: dividendRate_X} },function (err, doc){","           var temp = []","           for(var i=0;i<doc.length;i++){","               if(JSON.stringify(temp).indexOf(doc[i].account) === -1){","               temp.push(doc[i])","               }","               else{","","               // the account already has a doc, check if dividendRate is lower than the previous, filter out the highest one","               ","               ","               Array.prototype.filterObjects = function(key, value) {","                   return this.filter(function(x) { return x[key] === value; })","               }","               ","               var a = temp.filterObjects(\"account\", doc[i].account);","                ","               if(a[0].dividendRate > doc[i].dividendRate){  ","               temp = temp.filter(function (el) {","                        return el.account !== doc[i].account;","                       });","            ","               temp.push(doc[i])                   ","               }","                   ","               }","              ","           }","           ","           ","           ","           ","setTimeout(function(){ // todo: use async.waterfall instead of setTimeout","var doc_filtered = temp","","    callback(doc_filtered)","    ","}, 1000)","    ","           ","        })","        ","        ","        ","  }","","","   function line_X_dividend_pathways(doc){","","        for(var i=0;i<doc.length;i++){","            // filter out the root account","                  if(doc.account !== account_id){","                      ","                     // filter out accounts that have been passed to avoid loops          ","                     if(JSON.stringify(LINES).indexOf(doc[i].account) ===-1){","                         ","                         add_inventive_layer_penalties(doc[i])","                     } ","                  } ","                  else console.log(\"CIRCULAR\")","        }","   }","","","","    function add_inventive_layer_penalties(doc_X){","        ","            var penalty_dividendRate","    db.collection(doc_X.account).find({ type:\"incentive_layer_penalty\", currency: currency },function (err, doc){","        if(doc.length!==0){","            ","            // get the lowest dividend rate that user has a penalty at","       penalty_dividendRate = doc[0].dividendRate","       for(var j=0;j<doc.length;j++){","            if(penalty_dividendRate<doc[j].dividendRate<penalty_dividendRate){","            penalty_dividendRate = doc[j].dividendRate","            }","        }","        if(penalty_dividendRate<dividendRate_X){","            penalty=true","            ","        add_dividendRate_quotas(doc_X, dividendRate_quota_X, penalty_dividendRate)","","        }","        else add_dividendRate_quotas(doc_X, dividendRate_quota_X)","        }","        else add_dividendRate_quotas(doc_X, dividendRate_quota_X)","","    ","})","","}","","","","    function add_dividendRate_quotas(doc,dividendRate_quota_X, penalty_dividendRate){ // todo: fix this","    //     ","    if(doc.dividendRate <= dividendRate_X){","        ","        var dividendRate_quota_X = new Fraction((doc.dividendRate *100),(dividendRate_X*100)).multiply(new Fraction(dividendRate_quota_X)).toString()","","","","    }","    else dividendRate_quota_X = dividendRate_quota_X","    ","    console.log(penalty_dividendRate)","    // More penalty code:","    if(penalty_dividendRate !== undefined){","","        var dividendRate_quota_without_penalty = dividendRate_quota_X","        var dividendRate_quota_X = new Fraction((penalty_dividendRate *100),(dividendRate_X*100)).multiply(new Fraction(dividendRate_quota_X)).toString()","","        ","        ","","        }","","dividendRate_quota_sum = new Fraction(dividendRate_quota_sum).add(new Fraction(dividendRate_quota_X)).toString()","","push_to_LINES(doc, dividendRate_quota_X, dividendRate_quota_without_penalty)","    }","    ","    ","    function push_to_LINES(doc, dividendRate_quota_X, dividendRate_quota_without_penalty){","","","","","        if(penalty == true)LINES.push({account: doc.account, pathway: doc.total_pathway, dividendRate_quota: dividendRate_quota_X, line: Number(line_X), dividendRate_quota_without_penalty: dividendRate_quota_without_penalty}) ","        else LINES.push({account: doc.account, pathway: doc.total_pathway, dividendRate_quota: dividendRate_quota_X, line: Number(line_X)}) //add total pathway here","","       lines_for_X(doc.account, currency, doc.dividendRate, dividendRate_quota_X)","","    }","","        ","    }","","setTimeout(function(){","","","    callback(LINES, dividendRate_quota_sum, currency, account_id, dividend_amount)","    ","}, 10000)","    ","}",""]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":0},"end":{"row":19,"column":2},"action":"remove","lines":["*/"]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":0},"end":{"row":6,"column":2},"action":"remove","lines":["/*"]}]}],[{"group":"doc","deltas":[{"start":{"row":7,"column":15},"end":{"row":7,"column":49},"action":"remove","lines":["r46XJq7UJmoPno2cURDRs8bB9crRLJgpcY"]},{"start":{"row":7,"column":15},"end":{"row":7,"column":49},"action":"insert","lines":["rLaKjMvLbrAJwnH4VpawQ6ot9epZqJmbfQ"]}]}],[{"group":"doc","deltas":[{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"remove","lines":["6"]}]}],[{"group":"doc","deltas":[{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"insert","lines":["3"]}]}],[{"group":"doc","deltas":[{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"remove","lines":["3"]}]}],[{"group":"doc","deltas":[{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"insert","lines":["4"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":0},"end":{"row":22,"column":8},"action":"remove","lines":["exports."]},{"start":{"row":22,"column":0},"end":{"row":22,"column":1},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":1},"end":{"row":22,"column":2},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":2},"end":{"row":22,"column":3},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":3},"end":{"row":22,"column":4},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":4},"end":{"row":22,"column":5},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":5},"end":{"row":22,"column":6},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":6},"end":{"row":22,"column":7},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":7},"end":{"row":22,"column":8},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":8},"end":{"row":22,"column":9},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":25},"end":{"row":22,"column":33},"action":"remove","lines":["function"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":24},"end":{"row":22,"column":25},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":23},"end":{"row":22,"column":24},"action":"remove","lines":["="]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":22},"end":{"row":22,"column":23},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":13,"column":24},"end":{"row":17,"column":14},"action":"remove","lines":["console.log(dividendRate_quota_sum)","    var amount = 4","var f = new Fraction(dividendRate_quota_sum).numerator","","console.log(f)"]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":63},"end":{"row":12,"column":85},"action":"remove","lines":["dividendRate_quota_sum"]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":62},"end":{"row":12,"column":63},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":61},"end":{"row":12,"column":62},"action":"remove","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":56},"end":{"row":12,"column":61},"action":"remove","lines":["LINES"]},{"start":{"row":12,"column":56},"end":{"row":12,"column":124},"action":"insert","lines":["LINES, dividendRate_quota_sum, currency, account_id, dividend_amount"]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":47},"end":{"row":12,"column":48},"action":"insert","lines":["4"]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":48},"end":{"row":12,"column":49},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":49},"end":{"row":12,"column":50},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":171,"column":11},"end":{"row":171,"column":26},"action":"remove","lines":["penalty == true"]},{"start":{"row":171,"column":11},"end":{"row":171,"column":45},"action":"insert","lines":["penalty_dividendRate !== undefined"]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":75},"end":{"row":162,"column":76},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":76},"end":{"row":162,"column":77},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":76},"end":{"row":162,"column":77},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":75},"end":{"row":162,"column":76},"action":"remove","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":41},"end":{"row":162,"column":42},"action":"insert","lines":["v"]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":41},"end":{"row":162,"column":42},"action":"remove","lines":["v"]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":41},"end":{"row":162,"column":61},"action":"insert","lines":["penalty_dividendRate"]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":61},"end":{"row":162,"column":62},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":62},"end":{"row":162,"column":63},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":166,"column":54},"end":{"row":166,"column":74},"action":"insert","lines":["penalty_dividendRate"]}]}],[{"group":"doc","deltas":[{"start":{"row":166,"column":74},"end":{"row":166,"column":75},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":166,"column":75},"end":{"row":166,"column":76},"action":"insert","lines":[" "]}]}]]},"ace":{"folds":[],"scrolltop":98.5,"scrollleft":0,"selection":{"start":{"row":19,"column":0},"end":{"row":189,"column":0},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":5,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1428918988061,"hash":"8f59884a2f7974c4dcd098b03c6ab038e52826ed"}