{"filter":false,"title":"a.js","tooltip":"/a.js","undoManager":{"mark":1,"position":1,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":151,"column":16},"action":"insert","lines":["/* find_dividend_pathway_line_between_nodes.js */","","","/*loading mongodb*/    ","var mongojs = require(\"mongojs\")","var db = mongojs(\"mongodb://guest:guest@ds035448.mongolab.com:35448/bootable_version\");   ","","/*","var address = \"r46XJq7UJmoPno2cURDRs8bB9crRLJgpcY\"","var destination = \"rJqpM2tzsHT5c8obB3wCzjbaKaF2WP6qB9\"","var currency = \"RES\"","","  find_dividend_pathway_line_between_nodes(address, destination, function(data){console.log(data)})","*/  ","                function find_dividend_pathway_line_between_nodes(address, destination, currency, callback){//export.find_dividend_pathway_line_between_nodes on bottom of script","                    // could use safety-net-pathways here","                     var LINES = []","            lines_for_X(address)","    function lines_for_X(account){","        ","          //filter out if an account has multiple dividendRates, sort by the rate closest to dividendRate_X","  filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, line_X_dividend_pathways)  ","  function filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, callback){","       db.collection(account).find({ type:\"dividend_pathway\", currency: currency, dividendRate: { $lte: dividendRate_X} },function (err, doc){","           var temp = []","","           for(var i=0;i<doc.length;i++){","               if(JSON.stringify(temp).indexOf(doc[i].account) === -1){","               temp.push(doc[i])","               }","               else{","","               // the account already has a doc, check if dividendRate is lower than the previous, filter out the highest one","               ","               ","               Array.prototype.filterObjects = function(key, value) {","                   return this.filter(function(x) { return x[key] === value; })","               }","               ","               var a = temp.filterObjects(\"account\", doc[i].account);","                ","               if(a[0].dividendRate > doc[i].dividendRate){  ","               temp = temp.filter(function (el) {","                        return el.account !== doc[i].account;","                       });","            ","               temp.push(doc[i])                   ","               }","                   ","               }","              ","           }","           ","           ","           ","           ","setTimeout(function(){ // todo: use async.waterfall instead of setTimeout","var doc_filtered = temp","    callback(doc_filtered)","    ","}, 1000)","    ","           ","        })","        ","        ","        ","  }","","        db.collection(account).find({ type:\"dividend_pathway\", currency: currency },function (err, doc){","           ","        for(var i=0;i<doc.length;i++){","            if(doc[i].account === destination){","                LINES.push({from:account,to:doc[i].account, dividend_pathway_width: \"0.02\"})","","                //console.log(\"found\")","                //console.log(LINES)","","filter_out_path_from_destination_to_account()","                                                break","","","            }","            ","        if(LINES.indexOf(account) === -1){","            if(LINES.indexOf(doc[i].account) === -1){","            LINES.push({from:account,to:doc[i].account})","            lines_for_X(doc[i].account)","            ","            }","        }","        }","        ","             /* ","                var PATH = []","","                var last = LINES[LINES.length-1] //add to PATH","                var filteredArray = LINES.filter(function (element) { ","                    return element.to === last.from;","                    });","                var filteredArray_next = LINES.filter(function (element) { ","                    return element.to === filteredArray.from;","                    });    ","                ","            console.log(last)","            console.log(LINES.indexOf({to: last.from}))","            ","console.log(filteredArray)","","last = filteredArray","*/","","","","","    })","    ","    ","    ","}","","function filter_out_path_from_destination_to_account(){","var PATH = []","var last = LINES[LINES.length-1]","PATH.push(last)","for(var i=(LINES.length-1);i>0;i--){ // set loop limit to LINES.length","","    if(LINES[i].from !== address){","    var filteredArray = LINES.filter(function (element) { ","    return element.to === last.from;","});","PATH.push(filteredArray[0])","last = filteredArray","}","else{","PATH.push(LINES[i])","","callback(PATH)","break","}","","}","    ","}","","","                }","","","exports.find_dividend_pathway_line_between_nodes = find_dividend_pathway_line_between_nodes","                ","                "]}]}],[{"group":"doc","deltas":[{"start":{"row":20,"column":5},"end":{"row":68,"column":0},"action":"remove","lines":["     //filter out if an account has multiple dividendRates, sort by the rate closest to dividendRate_X","  filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, line_X_dividend_pathways)  ","  function filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, callback){","       db.collection(account).find({ type:\"dividend_pathway\", currency: currency, dividendRate: { $lte: dividendRate_X} },function (err, doc){","           var temp = []","","           for(var i=0;i<doc.length;i++){","               if(JSON.stringify(temp).indexOf(doc[i].account) === -1){","               temp.push(doc[i])","               }","               else{","","               // the account already has a doc, check if dividendRate is lower than the previous, filter out the highest one","               ","               ","               Array.prototype.filterObjects = function(key, value) {","                   return this.filter(function(x) { return x[key] === value; })","               }","               ","               var a = temp.filterObjects(\"account\", doc[i].account);","                ","               if(a[0].dividendRate > doc[i].dividendRate){  ","               temp = temp.filter(function (el) {","                        return el.account !== doc[i].account;","                       });","            ","               temp.push(doc[i])                   ","               }","                   ","               }","              ","           }","           ","           ","           ","           ","setTimeout(function(){ // todo: use async.waterfall instead of setTimeout","var doc_filtered = temp","    callback(doc_filtered)","    ","}, 1000)","    ","           ","        })","        ","        ","        ","  }",""]}]}]]},"ace":{"folds":[],"scrolltop":282,"scrollleft":0,"selection":{"start":{"row":20,"column":5},"end":{"row":20,"column":5},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":24,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1428939970527,"hash":"b8854d49b1d4d487f7659681bc225d99cc5eb015"}