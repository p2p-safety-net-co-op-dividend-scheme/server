{"filter":false,"title":"old_swarm_redisribution2.js","tooltip":"/old_swarm_redisribution2.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":170,"column":0},"action":"insert","lines":["","/*loading mongodb*/    ","var mongojs = require(\"mongojs\")","var db = mongojs(\"mongodb://guest:guest@ds035448.mongolab.com:35448/bootable_version\");   ","","","","","var LINES = []","var dividendRate_quota_sum = 0","    var penalty = Boolean","","","","exports.compute_swarm = function(account_id, currency, dividendRate, dividend_amount, callback){","","lines_for_X(account_id, currency, dividendRate, 1)","","","function lines_for_X(account, currency, dividendRate_X, dividendRate_X_quota){","    ","   //filter out if an account has multiple dividendRates, sort by the rate closest to dividendRate_X","  filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, line_X_dividend_pathways)  ","  function filter_dividend_pathways_by_dividendRate(account, currency, dividendRate_X, callback){","       db.collection(account).find({ type:\"dividend_pathway\", currency: currency, dividendRate: { $lte: dividendRate_X} },function (err, doc){","           console.log(doc)","           var temp = []","           for(var i=0;i<doc.length;i++){","               if(JSON.stringify(temp).indexOf(doc[i].account) === -1){","               temp.push(doc[i])","               }","               else{","","               // the account already has a doc, check if dividendRate is lower than the previous, filter out the highest one","               ","               ","               Array.prototype.filterObjects = function(key, value) {","                   return this.filter(function(x) { return x[key] === value; })","               }","               ","               var a = temp.filterObjects(\"account\", doc[i].account);","                ","               if(a[0].dividendRate > doc[i].dividendRate){  ","               temp = temp.filter(function (el) {","                        return el.account !== doc[i].account;","                       });","            ","               temp.push(doc[i])                   ","               }","                   ","               }","              ","           }","           ","           ","           ","           ","setTimeout(function(){ // todo: use async.waterfall instead of setTimeout","console.log(temp)","var doc_filtered = temp","","    callback(doc_filtered)","    ","}, 3000)","    ","           ","        })","        ","        ","        ","  }","","","   function line_X_dividend_pathways(doc){","       ","           //dividendRate/dividendRate_X * dividendRate_X_quota","           ","           ","        for(var i=0;i<doc.length;i++){","            // filter out the root account","                  if(doc.account !== account_id){","                      ","                     // filter out accounts that have been passed to avoid loops          ","                     if(JSON.stringify(LINES).indexOf(doc[i].account) ===-1){","                         add_inventive_layer_penalties(doc[i])","                     } ","                  } ","                  else console.log(\"CIRCULAR\")","        }","   }","","","","    function add_inventive_layer_penalties(doc_X){","            var penalty_dividendRate","","    db.collection(doc_X.account).find({ type:\"incentive_layer_penalty\", currency: currency },function (err, doc){","        if(doc.length!==0){","            ","            // get the lowest dividend rate that user has a penalty at","       penalty_dividendRate = doc[0].dividendRate","       for(var j=0;j<doc.length;j++){","            if(penalty_dividendRate<doc[j].dividendRate<penalty_dividendRate){","            penalty_dividendRate = doc[j].dividendRate","            }","        }","        if(penalty_dividendRate<dividendRate_X){penalty=true}","        console.log(\"penalty_dividendRate: \"+penalty_dividendRate)","        add_dividendRate_quotas(doc_X, penalty_dividendRate)","","        }","        else add_dividendRate_quotas(doc_X)","","    ","})","","}","","","","    function add_dividendRate_quotas(doc, penalty_dividendRate){","        ","    //     ","    if(doc.dividendRate < dividendRate_X){","    var dividendRate_quota_X = doc.dividendRate / dividendRate_X  * dividendRate_quota_X","    }","    else dividendRate_quota_X = 1","    ","    ","    // More penalty code:","    if(penalty == true){","        var dividendRate_quota_without_penalty = dividendRate_quota_X","            var dividendRate_quota_X = penalty_dividendRate / dividendRate_X * dividendRate_quota_X","        }","","","        dividendRate_quota_sum = Number(dividendRate_quota_sum) + Number(dividendRate_quota_X)","","","push_to_LINES(doc, dividendRate_quota_X, dividendRate_quota_without_penalty)","    }","    ","    ","    function push_to_LINES(doc, dividendRate_quota_X, dividendRate_quota_without_penalty){","        ","","","","        if(penalty == true)LINES.push({account: doc.account, pathway: doc.total_pathway, dividendRate_quota: dividendRate_quota_X, dividendRate_quota_without_penalty: dividendRate_quota_without_penalty, line: Number(LINES.length)}) ","        else LINES.push({account: doc.account, pathway: doc.total_pathway, dividendRate_quota: dividendRate_quota_X, line: Number(LINES.length)}) //add total pathway here","","       ","       ","       ","        lines_for_X(doc.account)","","    }","","        ","    }","","setTimeout(function(){","console.log(LINES)","","","    callback(LINES, dividendRate_quota_sum, currency, account_id, dividend_amount)","    ","}, 3000)","    ","}",""]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":14,"column":0},"end":{"row":14,"column":7},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":0,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1428913740686,"hash":"5d594a495a456cb892931674f018a50c0ea23773"}